Index: ffmpeg-4.4.5/fftools/ffmpeg.c
===================================================================
--- ffmpeg-4.4.5.orig/fftools/ffmpeg.c
+++ ffmpeg-4.4.5/fftools/ffmpeg.c
@@ -566,6 +566,7 @@ static void ffmpeg_cleanup(int ret)
         av_freep(&filtergraphs[i]);
     }
     av_freep(&filtergraphs);
+    nb_filtergraphs = 0;
 
     av_freep(&subtitle_out);
 
@@ -583,6 +584,8 @@ static void ffmpeg_cleanup(int ret)
 
         av_freep(&output_files[i]);
     }
+    av_freep(&output_files);
+    nb_output_files = 0;
     for (i = 0; i < nb_output_streams; i++) {
         OutputStream *ost = output_streams[i];
 
@@ -621,6 +624,8 @@ static void ffmpeg_cleanup(int ret)
 
         av_freep(&output_streams[i]);
     }
+    av_freep(&output_streams);
+    nb_output_streams = 0;
 #if HAVE_THREADS
     free_input_threads();
 #endif
@@ -629,6 +634,8 @@ static void ffmpeg_cleanup(int ret)
         av_packet_free(&input_files[i]->pkt);
         av_freep(&input_files[i]);
     }
+    av_freep(&input_files);
+    nb_input_files = 0;
     for (i = 0; i < nb_input_streams; i++) {
         InputStream *ist = input_streams[i];
 
@@ -646,6 +653,8 @@ static void ffmpeg_cleanup(int ret)
 
         av_freep(&input_streams[i]);
     }
+    av_freep(&input_streams);
+    nb_input_streams = 0;
 
     if (vstats_file) {
         if (fclose(vstats_file))
@@ -671,7 +680,6 @@ static void ffmpeg_cleanup(int ret)
         av_log(NULL, AV_LOG_INFO, "Conversion failed!\n");
     }
     term_exit();
-    ffmpeg_exited = 1;
 }
 
 void remove_avoptions(AVDictionary **a, AVDictionary *b)
@@ -4957,7 +4965,12 @@ static void log_callback_null(void *ptr,
 {
 }
 
+#ifdef __EMSCRIPTEN__
+int ffmpeg_main(int argc, char **argv);
+int ffmpeg_main(int argc, char **argv)
+#else
 int main(int argc, char **argv)
+#endif
 {
     int i, ret;
     BenchmarkTimeStamps ti;
Index: ffmpeg-4.4.5/fftools/ffprobe.c
===================================================================
--- ffmpeg-4.4.5.orig/fftools/ffprobe.c
+++ ffmpeg-4.4.5/fftools/ffprobe.c
@@ -80,8 +80,10 @@ typedef struct InputFile {
     int       nb_streams;
 } InputFile;
 
+#ifndef __EMSCRIPTEN__
 const char program_name[] = "ffprobe";
 const int program_birth_year = 2007;
+#endif
 
 static int do_bitexact = 0;
 static int do_count_frames = 0;
@@ -358,6 +360,41 @@ static void ffprobe_cleanup(int ret)
 #if HAVE_THREADS
     pthread_mutex_destroy(&log_mutex);
 #endif
+
+    do_bitexact = do_count_frames = do_count_packets = do_read_frames =
+        do_read_packets = do_show_chapters = do_show_error = do_show_format =
+        do_show_frames = do_show_packets = do_show_programs =
+        do_show_streams = do_show_stream_disposition =
+        do_show_data =
+        do_show_program_version = do_show_library_versions =
+        do_show_pixel_formats = 0;
+    do_show_chapter_tags = do_show_format_tags = do_show_frame_tags =
+        do_show_program_tags = do_show_stream_tags =
+        do_show_packet_tags = 0;
+    show_value_unit = use_value_prefix = use_byte_value_binary_prefix =
+        use_value_sexagesimal_format = 0;
+    show_private_data = 1;
+
+    av_freep(&stream_specifier);
+    av_freep(&show_data_hash);
+
+    av_freep(&read_intervals);
+    read_intervals_nb = 0;
+
+    find_stream_info = 1;
+
+    options = NULL;
+
+    av_freep(&input_filename);
+    av_freep(&print_input_filename);
+    iformat = NULL;
+
+    av_hash_freep(&hash);
+
+    nb_streams = 0;
+    av_freep(&nb_streams_packets);
+    av_freep(&nb_streams_frames);
+    av_freep(&selected_streams);
 }
 
 struct unit_value {
@@ -2983,7 +3020,7 @@ static int open_input_file(InputFile *if
     ifile->streams = av_mallocz_array(fmt_ctx->nb_streams,
                                       sizeof(*ifile->streams));
     if (!ifile->streams)
-        exit(1);
+        exit_program(1);
     ifile->nb_streams = fmt_ctx->nb_streams;
 
     /* bind a decoder to each input stream */
@@ -3032,7 +3069,7 @@ static int open_input_file(InputFile *if
             if (avcodec_open2(ist->dec_ctx, codec, &opts) < 0) {
                 av_log(NULL, AV_LOG_WARNING, "Could not open codec for input stream %d\n",
                        stream->index);
-                exit(1);
+                exit_program(1);
             }
 
             if ((t = av_dict_get(opts, "", NULL, AV_DICT_IGNORE_SUFFIX))) {
@@ -3381,6 +3418,7 @@ static int opt_print_filename(void *optc
     return 0;
 }
 
+#ifndef __EMSCRIPTEN__
 void show_help_default(const char *opt, const char *arg)
 {
     av_log_set_callback(log_callback_help);
@@ -3391,6 +3429,7 @@ void show_help_default(const char *opt,
     show_help_children(avformat_get_class(), AV_OPT_FLAG_DECODING_PARAM);
     show_help_children(avcodec_get_class(), AV_OPT_FLAG_DECODING_PARAM);
 }
+#endif
 
 /**
  * Parse interval specification, according to the format:
@@ -3662,7 +3701,12 @@ static inline int check_section_show_ent
             do_show_##varname = 1;                                      \
     } while (0)
 
+#ifdef __EMSCRIPTEN__
+int ffprobe_main(int argc, char **argv);
+int ffprobe_main(int argc, char **argv)
+#else
 int main(int argc, char **argv)
+#endif
 {
     const Writer *w;
     WriterContext *wctx;
@@ -3808,5 +3852,8 @@ end:
 
     avformat_network_deinit();
 
+#ifdef __EMSCRIPTEN__
+    exit_program(ret < 0);
+#endif
     return ret < 0;
 }
Index: ffmpeg-4.4.5/libavutil/thread.h
===================================================================
--- ffmpeg-4.4.5.orig/libavutil/thread.h
+++ ffmpeg-4.4.5/libavutil/thread.h
@@ -24,9 +24,9 @@
 
 #include "config.h"
 
-#if HAVE_PTHREADS || HAVE_W32THREADS || HAVE_OS2THREADS
+#if HAVE_PTHREADS || HAVE_W32THREADS || HAVE_OS2THREADS || defined(__EMSCRIPTEN__)
 
-#if HAVE_PTHREADS
+#if HAVE_PTHREADS || defined(__EMSCRIPTEN__)
 #include <pthread.h>
 
 #if defined(ASSERT_LEVEL) && ASSERT_LEVEL > 1
Index: ffmpeg-4.4.5/libavutil/threadmessage.c
===================================================================
--- ffmpeg-4.4.5.orig/libavutil/threadmessage.c
+++ ffmpeg-4.4.5/libavutil/threadmessage.c
@@ -22,8 +22,10 @@
 #include "threadmessage.h"
 #include "thread.h"
 
+#define HAVE_THREAD_MESSAGES (HAVE_THREADS || defined(__EMSCRIPTEN__))
+
 struct AVThreadMessageQueue {
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
     AVFifoBuffer *fifo;
     pthread_mutex_t lock;
     pthread_cond_t cond_recv;
@@ -41,7 +43,7 @@ int av_thread_message_queue_alloc(AVThre
                                   unsigned nelem,
                                   unsigned elsize)
 {
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
     AVThreadMessageQueue *rmq;
     int ret = 0;
 
@@ -77,20 +79,20 @@ int av_thread_message_queue_alloc(AVThre
 #else
     *mq = NULL;
     return AVERROR(ENOSYS);
-#endif /* HAVE_THREADS */
+#endif /* HAVE_THREAD_MESSAGES */
 }
 
 void av_thread_message_queue_set_free_func(AVThreadMessageQueue *mq,
                                            void (*free_func)(void *msg))
 {
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
     mq->free_func = free_func;
 #endif
 }
 
 void av_thread_message_queue_free(AVThreadMessageQueue **mq)
 {
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
     if (*mq) {
         av_thread_message_flush(*mq);
         av_fifo_freep(&(*mq)->fifo);
@@ -104,7 +106,7 @@ void av_thread_message_queue_free(AVThre
 
 int av_thread_message_queue_nb_elems(AVThreadMessageQueue *mq)
 {
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
     int ret;
     pthread_mutex_lock(&mq->lock);
     ret = av_fifo_size(mq->fifo);
@@ -115,7 +117,7 @@ int av_thread_message_queue_nb_elems(AVT
 #endif
 }
 
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
 
 static int av_thread_message_queue_send_locked(AVThreadMessageQueue *mq,
                                                void *msg,
@@ -151,13 +153,13 @@ static int av_thread_message_queue_recv_
     return 0;
 }
 
-#endif /* HAVE_THREADS */
+#endif /* HAVE_THREAD_MESSAGES */
 
 int av_thread_message_queue_send(AVThreadMessageQueue *mq,
                                  void *msg,
                                  unsigned flags)
 {
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
     int ret;
 
     pthread_mutex_lock(&mq->lock);
@@ -166,14 +168,14 @@ int av_thread_message_queue_send(AVThrea
     return ret;
 #else
     return AVERROR(ENOSYS);
-#endif /* HAVE_THREADS */
+#endif /* HAVE_THREAD_MESSAGES */
 }
 
 int av_thread_message_queue_recv(AVThreadMessageQueue *mq,
                                  void *msg,
                                  unsigned flags)
 {
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
     int ret;
 
     pthread_mutex_lock(&mq->lock);
@@ -182,32 +184,32 @@ int av_thread_message_queue_recv(AVThrea
     return ret;
 #else
     return AVERROR(ENOSYS);
-#endif /* HAVE_THREADS */
+#endif /* HAVE_THREAD_MESSAGES */
 }
 
 void av_thread_message_queue_set_err_send(AVThreadMessageQueue *mq,
                                           int err)
 {
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
     pthread_mutex_lock(&mq->lock);
     mq->err_send = err;
     pthread_cond_broadcast(&mq->cond_send);
     pthread_mutex_unlock(&mq->lock);
-#endif /* HAVE_THREADS */
+#endif /* HAVE_THREAD_MESSAGES */
 }
 
 void av_thread_message_queue_set_err_recv(AVThreadMessageQueue *mq,
                                           int err)
 {
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
     pthread_mutex_lock(&mq->lock);
     mq->err_recv = err;
     pthread_cond_broadcast(&mq->cond_recv);
     pthread_mutex_unlock(&mq->lock);
-#endif /* HAVE_THREADS */
+#endif /* HAVE_THREAD_MESSAGES */
 }
 
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
 static void free_func_wrap(void *arg, void *msg, int size)
 {
     AVThreadMessageQueue *mq = arg;
@@ -217,7 +219,7 @@ static void free_func_wrap(void *arg, vo
 
 void av_thread_message_flush(AVThreadMessageQueue *mq)
 {
-#if HAVE_THREADS
+#if HAVE_THREAD_MESSAGES
     int used, off;
     void *free_func = mq->free_func;
 
@@ -231,5 +233,5 @@ void av_thread_message_flush(AVThreadMes
      * is nothing to read */
     pthread_cond_broadcast(&mq->cond_send);
     pthread_mutex_unlock(&mq->lock);
-#endif /* HAVE_THREADS */
+#endif /* HAVE_THREAD_MESSAGES */
 }
